package ripico.database;

import ripico.api.dal.SpielAdapter;
import ripico.api.domain.Mannschaft;
import ripico.api.domain.MannschaftBuilder;
import ripico.api.domain.Spiel;
import ripico.api.domain.SpielBuilder;
import ripico.api.domain.enums.QuotenArt;
import ripico.api.domain.enums.Sportart;
import ripico.database.connection.DefaultConnectionPool;
import ripico.service.exception.ResourceNotFoundException;

import java.sql.*;
import java.util.Date;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class DatabaseSpielAdapterImpl implements SpielAdapter {
    private static final Logger logger = Logger.getLogger(DatabaseSpielAdapterImpl.class.getName());

    private final DefaultConnectionPool connectionPool;

    public DatabaseSpielAdapterImpl() throws SQLException {
        connectionPool = DefaultConnectionPool.create();
    }

    @Override
    public Spiel createSpiel(Spiel spiel) throws SQLException {
        Connection connection;
        try {
            connection = connectionPool.getConnection();
        } catch (SQLException e) {
            return null;
        }
        try (PreparedStatement preparedStatement = createPreparedStatementCreate(connection, spiel)) {
            int ergebnis = preparedStatement.executeUpdate();
            if (ergebnis == 0) {
                return null;
            }
            ResultSet tableKeys = preparedStatement.getGeneratedKeys();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);
            insertIntoQuoten(connection, spiel.getQuoten(), autoGeneratedID);
            spiel.setSpielId(autoGeneratedID);
            return spiel;
        } catch (SQLException e) {
            return null;
        }
    }

    @Override
    public Optional<Spiel> readSpiel(int spielNr) {
        Connection connection;
        try {
            connection = connectionPool.getConnection();
        } catch (SQLException e) {
            return Optional.empty();
        }
        try (PreparedStatement preparedStatement = createPreparedStatementRead(connection, spielNr);
             ResultSet resultSet = preparedStatement.executeQuery()) {
            SpielBuilder spielBuilder = SpielBuilder
                    .newSpiel();
            Spiel spiel = null;
            while (resultSet.next()) {
                Mannschaft mannschaftHeim = MannschaftBuilder
                        .newMannschaft()
                        .withMannschaftId(resultSet.getInt(3))
                        .withMannschaftsName(resultSet.getString(4))
                        .withMannschaftLogo(resultSet.getString(5))
                        .build();
                Mannschaft mannschaftAuswaerts = MannschaftBuilder
                        .newMannschaft()
                        .withMannschaftId(resultSet.getInt(6))
                        .withMannschaftsName(resultSet.getString(7))
                        .withMannschaftLogo(resultSet.getString(8))
                        .build();
                spielBuilder
                        .withSpielId(resultSet.getInt(1))
                        .withSportart(Sportart.getSportartFromId(resultSet.getInt(2)))
                        .withMannschaftHeim(mannschaftHeim)
                        .withMannschaftAuswaerts(mannschaftAuswaerts)
                        .withDatum(convertTimestampToDate(resultSet.getTimestamp(9)));
                String quotenArtString = resultSet.getString(10);
                if (quotenArtString != null) {
                    spielBuilder
                            .withErgebnis(QuotenArt.valueOf(quotenArtString));
                }
                Map<QuotenArt, Float> quotenFromDatabase = getQuotenFromDatabase(spielNr, connection);
                spiel = spielBuilder.withQuoten(quotenFromDatabase).build();
            }
            connectionPool.releaseConnection(connection);
            if (spiel == null) {
                return Optional.empty();
            }
            return Optional.of(spiel);
        } catch (SQLException | ResourceNotFoundException e) {
            return Optional.empty();
        }
    }

    @Override
    public Spiel updateSpiel(Spiel spiel) {
        Connection connection;
        try {
            connection = connectionPool.getConnection();
        } catch (SQLException e) {
            return null;
        }
        try (PreparedStatement preparedStatement = createPreparedStatementUpdate(connection, spiel)) {
            int ergebnis = preparedStatement.executeUpdate();
            if (ergebnis == 0) {
                return null;
            }
            return spiel;
        } catch (SQLException e) {
            return null;
        }
    }

    @Override
    public List<Spiel> getAllSpiele() {
        Connection connection;
        try {
            connection = connectionPool.getConnection();
        } catch (SQLException e) {
            return new ArrayList<>();
        }
        try (PreparedStatement preparedStatement = createPreparedStatementRead(connection, 0);
             ResultSet resultSet = preparedStatement.executeQuery()) {
            List<Spiel> spiele = new ArrayList<>();
            while (resultSet.next()) {
                Mannschaft mannschaftHeim = MannschaftBuilder
                        .newMannschaft()
                        .withMannschaftId(resultSet.getInt(3))
                        .withMannschaftsName(resultSet.getString(4))
                        .withMannschaftLogo(resultSet.getString(5))
                        .build();
                Mannschaft mannschaftAuswaerts = MannschaftBuilder
                        .newMannschaft()
                        .withMannschaftId(resultSet.getInt(6))
                        .withMannschaftsName(resultSet.getString(7))
                        .withMannschaftLogo(resultSet.getString(8))
                        .build();
                SpielBuilder spielBuilder = SpielBuilder
                        .newSpiel()
                        .withSpielId(resultSet.getInt(1))
                        .withSportart(Sportart.getSportartFromId(resultSet.getInt(2)))
                        .withMannschaftHeim(mannschaftHeim)
                        .withMannschaftAuswaerts(mannschaftAuswaerts)
                        .withDatum(convertTimestampToDate(resultSet.getTimestamp(9)));
                String quotenArtString = resultSet.getString(10);
                if (quotenArtString != null) {
                    spielBuilder
                            .withErgebnis(QuotenArt.valueOf(quotenArtString));
                }
                Map<QuotenArt, Float> quotenFromDatabase = getQuotenFromDatabase(resultSet.getInt(1), connection);
                spielBuilder.withQuoten(quotenFromDatabase);
                spiele.add(spielBuilder.build());
            }
            connectionPool.releaseConnection(connection);
            return spiele;
        } catch (SQLException | ResourceNotFoundException e) {
            return new ArrayList<>();
        }
    }

    private PreparedStatement createPreparedStatementCreate(Connection connection, Spiel spiel) throws SQLException {
        String sqlStatement = "INSERT INTO ripico.spiel(sportart_id, mannschaft_heim, mannschaft_auswaerts, datum) values (?,?,?,?)";
        PreparedStatement preparedStatement = connection.prepareStatement(sqlStatement, Statement.RETURN_GENERATED_KEYS);
        preparedStatement.setInt(1, spiel.getSportart().getId());
        preparedStatement.setInt(2, spiel.getMannschaftHeim().getMannschaftId());
        preparedStatement.setInt(3, spiel.getMannschaftAuswaerts().getMannschaftId());
        preparedStatement.setTimestamp(4, new Timestamp(spiel.getDatum().getTime()));
        return preparedStatement;
    }

    private PreparedStatement createPreparedStatementUpdate(Connection connection, Spiel spiel) throws SQLException {
        String sqlStatement = "UPDATE ripico.spiel SET sportart_id = ?,mannschaft_heim=?,mannschaft_auswaerts=?,datum=?,ergebnis=? WHERE spiel_id=?";
        PreparedStatement preparedStatement = connection.prepareStatement(sqlStatement);
        preparedStatement.setInt(1, spiel.getSportart().getId());
        preparedStatement.setInt(2, spiel.getMannschaftHeim().getMannschaftId());
        preparedStatement.setInt(3, spiel.getMannschaftAuswaerts().getMannschaftId());
        preparedStatement.setTimestamp(4, new Timestamp(spiel.getDatum().getTime()));
        preparedStatement.setString(5, spiel.getErgebnis().toString());
        preparedStatement.setInt(6, spiel.getSpielId());
        return preparedStatement;
    }

    private PreparedStatement createPreparedStatementRead(Connection connection, int spielNr) throws SQLException {
        String sqlStatement = "SELECT spi.spiel_id,spi.sportart_id, spi.mannschaft_heim, mheim.mannschaft_name, mheim.logopfad, " +
                "spi.mannschaft_auswaerts, maus.mannschaft_name, maus.logopfad, spi.datum, spi.ergebnis " +
                "FROM ripico.spiel spi " +
                "JOIN ripico.mannschaft mheim on mheim.mannschaft_id = spi.mannschaft_heim " +
                "JOIN ripico.mannschaft maus on maus.mannschaft_id = spi.mannschaft_auswaerts ";
        if (spielNr != 0) {
            sqlStatement += "WHERE spiel_id = ?";

        }
        PreparedStatement preparedStatement = connection.prepareStatement(sqlStatement);
        if (spielNr != 0) {
            preparedStatement.setInt(1, spielNr);
        }
        return preparedStatement;
    }


    private PreparedStatement createPreparedStatementReadQuoten(Connection connection, int spielNr) throws SQLException {
        String sqlStatement = "SELECT quotenart, quote " +
                "FROM ripico.quote q " +
                "WHERE spiel_id = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(sqlStatement);
        preparedStatement.setInt(1, spielNr);
        return preparedStatement;
    }


    private Map<QuotenArt, Float> getQuotenFromDatabase(int spielNr, Connection connection) throws ResourceNotFoundException {
        try (PreparedStatement preparedStatement = createPreparedStatementReadQuoten(connection, spielNr);
             ResultSet resultSet = preparedStatement.executeQuery()) {
            Map<QuotenArt, Float> quoten = new EnumMap<>(QuotenArt.class);
            while (resultSet.next()) {
                QuotenArt quotenArt = QuotenArt.valueOf(resultSet.getString(1));
                Float quote = resultSet.getFloat(2);
                quoten.put(quotenArt, quote);
            }
            connectionPool.releaseConnection(connection);
            if (quoten.size() != 3) {
                throw new ResourceNotFoundException("Quotensize ist nicht gleich 3");
            }
            return quoten;
        } catch (SQLException e) {
            throw new ResourceNotFoundException("Error in getQuotenFromDB", e);
        }
    }

    private void insertIntoQuoten(Connection connection, Map<QuotenArt, Float> quoten, int spielId) throws SQLException {
        for (Map.Entry<QuotenArt, Float> entry : quoten.entrySet()) {
            try (PreparedStatement preparedStatement = createPreparedStatementCreateQuoten(connection, spielId, entry.getKey(), entry.getValue())) {
                int ergebnis = preparedStatement.executeUpdate();
                if (ergebnis == 0) {
                    throw new SQLException();
                }
            } catch (SQLException e) {
                logger.log(Level.SEVERE, "Probleme beim speichern der quoten");
                throw e;
            }
        }
    }

    private PreparedStatement createPreparedStatementCreateQuoten(Connection connection, int spielId, QuotenArt quotenArt, float quote) throws SQLException {
        String sqlStatement = "INSERT INTO ripico.quote(spiel_id, quotenart, quote) values (?,?,?)";
        PreparedStatement preparedStatement = connection.prepareStatement(sqlStatement, Statement.RETURN_GENERATED_KEYS);
        preparedStatement.setInt(1, spielId);
        preparedStatement.setString(2, quotenArt.toString());
        preparedStatement.setFloat(3, quote);
        return preparedStatement;
    }

    private Date convertTimestampToDate(Timestamp timestamp) {
        Date date = null;
        if (timestamp != null) {
            date = new Date(timestamp.getTime());
        }
        return date;
    }
}
